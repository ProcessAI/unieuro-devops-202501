// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model Produto {
  id                 Int         @id @default(autoincrement())
  nome               String
  descricao          String
  preco              Decimal
  precoOriginal      Decimal // âœ… Campo novo aqui
  frete              Decimal
  ativo              Boolean
  categoriaId        Int
  marcaId            Int
  modelo             String
  numeroModelo       String
  condicao           String
  dimensoes          String
  garantia           String
  voltagem           String
  localizacaoProduto String
  dataCadastro       DateTime    @default(now())
  quantidade         Int
  quantidadeVarejo   Int
  Categoria          Categoria   @relation(fields: [categoriaId], references: [id])
  Marca              Marca       @relation(fields: [marcaId], references: [id])
  avaliacoes         Avaliacao[]
  Desconto           Desconto[]  @relation("ProdutoDesconto")
  Pedido             Pedido[]
  Midias             Midia[]
}

model Desconto {
  id                  Int       @id @default(autoincrement())
  nome                String
  tipoDesconto        String // "porcentagem | numero fixo | valor fixo"
  qtdProdutoDesconto  Int
  qtdProdutosDesconto Int
  categoriaId         Int
  Categoria           Categoria @relation(fields: [categoriaId], references: [id])
  Produto             Produto[] @relation("ProdutoDesconto")
}

model Categoria {
  id       Int        @id @default(autoincrement())
  nome     String
  Produto  Produto[]
  Desconto Desconto[]
}

model Marca {
  id      Int       @id @default(autoincrement())
  nome    String
  Produto Produto[]
}

model Midia {
  id        Int     @id @default(autoincrement())
  link      String
  produtoId Int
  Produto   Produto @relation(fields: [produtoId], references: [id])
}

model Avaliacao {
  id            Int      @id @default(autoincrement())
  nome          String
  nota          Int // Range de 1 a 5 ou 1 a 10
  clienteId     Int
  texto         String
  dataAvaliacao DateTime @default(now())
  produtoId     Int
  Cliente       Cliente  @relation(fields: [clienteId], references: [id])
  Produto       Produto  @relation(fields: [produtoId], references: [id])
}

model Pedido {
  id             Int      @id @default(autoincrement())
  quantidade     Int
  clienteId      Int
  dataCompra     DateTime @default(now())
  produtoId      Int
  formaPagamento String
  status         String // "pago | cancelado | pendente | devolvido | troca"
  valorPago      Decimal
  dataEntrega    DateTime?
  notaFiscal     String?
  dataDevolucao  DateTime?
  assinado       String?
  asaasLinkId    String?
  descricaoError String?
  Cliente        Cliente  @relation(fields: [clienteId], references: [id])
  Produto        Produto  @relation(fields: [produtoId], references: [id])
}

model Cliente {
  id             Int         @id @default(autoincrement())
  nome           String
  email          String      @unique
  telefone       String
  senha          String
  dataNascimento DateTime
  cpf           String     @unique
  dataRegistro  DateTime   @default(now())
  ativo         Boolean
  empresas      Empresa[]  @relation("ClienteEmpresas")
  pedidos       Pedido[]
  avaliacoes    Avaliacao[]
  enderecos     Endereco[]
  verificado          Boolean   @default(true)
  tokenVerificacao   String?   @unique
  tokenExpiracao        DateTime?
  tokenRedefinicao       String?   @unique
  tokenRedefinicaoExpira DateTime?
}

model Empresa {
  id                 Int       @id @default(autoincrement())
  razaoSocial        String
  nomeFantasia       String
  telefone           String
  email              String
  cnpj               String    @unique
  inscricaoEstadual  String
  inscricaoMunicipal String
  clientes           Cliente[] @relation("ClienteEmpresas")
}

model Endereco {
  id              Int     @id @default(autoincrement())
  nome            String
  clienteId       Int
  bairro          String
  cidade          String
  estado          String
  cep             String
  complemento     String
  numero          String
  pontoReferencia String
  Cliente         Cliente @relation(fields: [clienteId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}